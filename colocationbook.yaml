- hosts: localhost
  become: yes
  become_user: root
  name: "Cluster resource colocation testing"
  tasks:
    - name: "Create cluster resource 1"
      cluster_resource:
        state: present
        name: myresource1
        resource_class: ocf
        resource_provider: heartbeat
        resource_type: IPaddr2
        options: |
          ip=1.1.1.2
          op monitor interval=10s
      register: resultobj
    - name: "Create cluster resource 1: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Create cluster resource 2"
      cluster_resource:
        state: present
        name: myresource2
        resource_class: ocf
        resource_provider: heartbeat
        resource_type: IPaddr2
        options: |
          ip=1.1.1.3
          op monitor interval=10s
      register: resultobj
    - name: "Create cluster resource 2: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Unpromote resource1"
      cluster_clone:
        state: absent
        resource_name: myresource1
        clone_type: promotable
        options: |
          clone-max=2 clone-node-max=1 interleave=true
      register: resultobj
    - name: "Unpromote resource1: Output"
      debug:
        msg: '{{ resultobj }}'

    - name: "Unpromote resource2"
      cluster_clone:
        state: absent
        resource_name: myresource2
        clone_type: promotable
        options: |
          clone-max=2 clone-node-max=1 interleave=true
      register: resultobj
    - name: "Unpromote resource2: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Ensure colocation constraint does not exist"
      cluster_colocation:
        state: absent
        source_resource: 'myresource1'
        target_resource: 'myresource2'
        score: 4000
      register: resultobj
    - name: "Ensure colocation constraint does not exist: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Create colocation constraint"
      cluster_colocation:
        state: present
        source_resource: 'myresource1'
        target_resource: 'myresource2'
        score: 4000
      register: resultobj
    - name: "Create colocation constraint: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Ensure colocation idempotence"
      cluster_colocation:
        state: present
        source_resource: 'myresource1'
        target_resource: 'myresource2'
        score: 4000
      register: resultobj
    - name: "Ensure colocation idempotence: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Ensure colocation idempotence with default values"
      cluster_colocation:
        state: present
        source_resource: 'myresource1'
        source_role: Started
        target_resource: 'myresource2'
        target_role: Started
        score: 4000
      register: resultobj
    - name: "Ensure colocation idempotence with default values: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Modify colocation constraint score"
      cluster_colocation:
        state: present
        source_resource: 'myresource1'
        target_resource: 'myresource2'
        score: 1000
      register: resultobj
    - name: "Modify colocation constraint score: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Create similar colocation contraint but with different source role"
      cluster_colocation:
        state: present
        source_resource: 'myresource1'
        source_role: Stopped
        target_resource: 'myresource2'
        score: 1000
      register: resultobj
    - name: "Create similar colocation contraint but with different source role: Output"
      debug:
        msg: '{{ resultobj }}'

    - name: "Make resource1 promotable"
      cluster_clone:
        state: present
        resource_name: myresource1
        clone_type: promotable
        options: |
          clone-max=2 clone-node-max=1 interleave=true
      register: resultobj
    - name: "Make resource1 promotable: Output"
      debug:
        msg: '{{ resultobj }}'

    - name: "Make resource2 promotable"
      cluster_clone:
        state: present
        resource_name: myresource2
        clone_type: promotable
        options: |
          clone-max=2 clone-node-max=1 interleave=true
      register: resultobj
    - name: "Make resource2 promotable: Output"
      debug:
        msg: '{{ resultobj }}'
    
    - name: "Modify colocation constraint completely"
      cluster_colocation:
        state: present
        source_resource: 'myresource2-clone'
        source_role: Master
        target_resource: 'myresource1-clone'
        target_role: Slave
        score: 1000
      register: resultobj
    - name: "Modify colocation constraint completely: Output"
      debug:
        msg: '{{ resultobj }}'