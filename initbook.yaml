
- hosts: localhost
  become: yes
  become_user: root
  name: "Cluster init testing"
  tasks:
    - name: "Set the nodes list per OS"
      ansible.builtin.set_fact:
        nodelist: "x0rapp00leb7 x0rapp01leb7"
      when: ansible_os_family == "RedHat"
    
    - name: "Set the nodes list per OS"
      ansible.builtin.set_fact:
        nodelist: "x00app00l650 x00app01l650"
      when: ansible_os_family == "Suse"

    - name: "Ensure cluster does not exist"
      cluster_init:
        state: absent
        sid: "wills-sid-123"
        nodes: "{{ nodelist }}"
        tier: "hana"
        token: "30000"
      register: resultobj
    - name: Dump the result object
      debug:
        msg: '{{ resultobj }}'

    - name: "Create cluster"
      cluster_init:
        state: present
        sid: "wills-sid-123"
        nodes: "{{ nodelist }}"
        tier: "hana"
        token: "30000"
      register: resultobj
    - name: Dump the result object
      debug:
        msg: '{{ resultobj }}'

    - name: "Remove other node"
      cluster_init:
        state: present
        sid: "wills-sid-123"
        nodes: "x0rapp00leb7"
        tier: "hana"
        token: "30000"
      register: resultobj
    - name: Dump the result object
      debug:
        msg: '{{ resultobj }}'

    - name: "Add node back"
      cluster_init:
        state: present
        sid: "wills-sid-123"
        nodes: "{{ nodelist }}"
        tier: "hana"
        token: "30000"
      register: resultobj
    - name: Dump the result object
      debug:
        msg: '{{ resultobj }}'

    - name: "Ensure idempotence"
      cluster_init:
        state: present
        sid: "wills-sid-123"
        nodes: "{{ nodelist }}"
        tier: "hana"
        token: "30000"
      register: resultobj
    - name: Dump the result object
      debug:
        msg: '{{ resultobj }}'

    - name: "Delete nonexistent cluster"
      cluster_init:
        state: absent
        sid: "idontexist"
        nodes: "{{ nodelist }}"
        tier: "hana"
        token: "30000"
      register: resultobj
    - name: Dump the result object
      debug:
        msg: '{{ resultobj }}'
      